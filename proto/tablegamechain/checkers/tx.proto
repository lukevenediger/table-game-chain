syntax = "proto3";

package tablegamechain.checkers;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "tablegamechain/checkers/params.proto";

option go_package = "table-game-chain/x/checkers/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  // CreateGame defines a (checkers) operation for creating a new game.
  rpc CreateGame(MsgCreateGame) returns (MsgCreateGameResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "tablegamechain/x/checkers/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines an empty response structure
message MsgUpdateParamsResponse {}

// MsgCreateGame is the Msg/CreateGame request type.
message MsgCreateGame {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string red = 2;
  string black = 3;
}

// MsgCreateGameResponse defines an empty response structure
message MsgCreateGameResponse {}
